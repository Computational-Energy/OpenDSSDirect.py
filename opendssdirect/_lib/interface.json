{
  "modules":[
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Sets the first element in the active class to be the active object; if object is a CktElement, ActiveCktElement also points to this element; returns 0 if none",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ActiveClassI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Sets the next element in the active class to be the active object; if object is a CktElement, ActiveCktElement also points to this element; returns 0 if no more",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ActiveClassI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of elements in the active class",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ActiveClassI",
          "name":"NumElements"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of elements in the active class; same as NumElements",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ActiveClassI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Name of the active element of the active class\nSet the name of the active element of the active class",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ActiveClassS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "0"
              ],
              "user_args":0
            }
          ],
          "doc":"Name of the active class",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ActiveClassS",
          "name":"ActiveClassName"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"All element names in the active class",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"ActiveClassV",
          "name":"AllNames"
        }
      ],
      "name":"ActiveClass"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of Circuits currently defined",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSI",
          "name":"NumCircuits"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Clears all circuit definitions",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSI",
          "name":"ClearAll"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Shows non-MDI child form of the Main DSS Edit Form",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSI",
          "name":"ShowPanel"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Validate the user and start OpenDSS; returns true if successful",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSI",
          "name":"Start"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of DSS intrinsic classes",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSI",
          "name":"NumClasses"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of user-defined classes",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSI",
          "name":"NumUserClasses"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Resets DSS Initialization for restarts",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSI",
          "name":"Reset"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Bool flag on the status of allowing forms\nBool flag to disable forms (once disabled, can't be enabled again)",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSI",
          "name":"AllowForms"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Make a new circuit",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSS",
          "name":"NewCircuit"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                "0"
              ],
              "user_args":0
            }
          ],
          "doc":"Get version string for OpenDSS",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSS",
          "name":"Version"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Default file path for reports, etc.\nSet the default file path for reports, etc.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSS",
          "name":"DataPath"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                "0"
              ],
              "user_args":0
            }
          ],
          "doc":"The path name for the default text editor",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSS",
          "name":"DefaultEditor"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"List of the names of intrinsic classes",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"DSSV",
          "name":"Classes"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"List of the names of user-defined classes",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"DSSV",
          "name":"UserClasses"
        }
      ],
      "name":"Basic"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of nodes",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"BUSI",
          "name":"NumNodes"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Refresh Zsc and Ysc values; execute after a major change in the circuit",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"BUSI",
          "name":"ZscRefresh"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Returns true if the X-Y coordinates are defined for the active bus",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"BUSI",
          "name":"Coorddefined"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Returns a unique node number at the active bus to avoid node collisions and adds it to the node list for the bus",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"BUSI",
          "name":"GetUniqueNodeNumber"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Returns the total number of customers downline from the active bus after reliability calcs",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"BUSI",
          "name":"N_Customers"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Integer ID of the feeder section in which this bus is located",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"BUSI",
          "name":"SectionID"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Base voltage",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"BUSF",
          "name":"kVBase"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"X coordinate of the bus\nSet the X coordinate of the bus",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"BUSF",
          "name":"X"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Y coordinate of the bus\nSet the Y coordinate of the bus",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"BUSF",
          "name":"Y"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Distance in km that this bus isfrom the parent EnergyMeter",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"BUSF",
          "name":"Distance"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Total annual failure rate for active bus after reliability calcs",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"BUSF",
          "name":"Lambda"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of interruptions this bus per year",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"BUSF",
          "name":"N_interrupts"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Average interruption duration, hours",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"BUSF",
          "name":"Int_Duration"
        },
        {
          "args":[
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Annual number of customer-interruptions from this bus",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"BUSF",
          "name":"Cust_Interrupts"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Accumulated customer outage durations, hours",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"BUSF",
          "name":"Cust_Duration"
        },
        {
          "args":[
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Total length of line downline from this bus, miles",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"BUSF",
          "name":"TotalMiles"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "0"
              ],
              "user_args":0
            }
          ],
          "doc":"Active bus name; set the active bus by name with `circuit.SetActiveBus(name)`",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"BUSS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Bus voltages, complex",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"BUSV",
          "name":"Voltages"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Sequence voltages in order of 0, 1, then 2",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"BUSV",
          "name":"SeqVoltages"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Vector of node numbers defined at the bus in the same order as the voltages",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"BUSV",
          "name":"Nodes"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Open-circuit voltage vector, complex",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"BUSV",
          "name":"Voc"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Short-circuit current vector, complex",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"BUSV",
          "name":"Isc"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Per-unit voltages at the bus, complex",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"BUSV",
          "name":"PuVoltage"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Short-circuit impedance matrix, complex",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"BUSV",
          "name":"ZscMatrix"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Positive-sequence short-circuit impedance looking into the bus, complex",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"BUSV",
          "name":"Zsc1"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Zero-sequence short-circuit impedance looking into the bus, complex",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"BUSV",
          "name":"Zsc0"
        },
        {
          "args":[
            {
              "dss_args":[
                9,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Short-circuit admittance matrix, complex",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"BUSV",
          "name":"YscMatrix"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"All complex sequence voltages",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"BUSV",
          "name":"CplxSeqVoltages"
        },
        {
          "args":[
            {
              "dss_args":[
                11,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Complex vector of line-to-line voltages for 2- and 3-phase buses; returns -1. for a 1-phase bus; for more than 3 phases, only returns 3 phases",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"BUSV",
          "name":"VLL"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Complex vector of per-unit line-to-line voltages for 2- and 3-phase buses; returns -1. for a 1-phase bus; for more than 3 phases, only returns 3 phases",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"BUSV",
          "name":"puVLL"
        },
        {
          "args":[
            {
              "dss_args":[
                13,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Bus voltage magnitudes with angles",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"BUSV",
          "name":"VMagAngle"
        },
        {
          "args":[
            {
              "dss_args":[
                14,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Bus voltage magnitudes (per unit) with angles",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"BUSV",
          "name":"puVmagAngle"
        }
      ],
      "name":"Bus"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Number of steps\nSet the number of steps",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapacitorsI",
          "name":"NumSteps"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Is the connection a delta\nSet connection type; use `arg==true` for delta and `arg==false` for wye",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapacitorsI",
          "name":"IsDelta"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Sets the first Capacitor active; returns 0 if none",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapacitorsI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Sets the next Capacitor active; returns 0 if no more",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapacitorsI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of capacitor objects in the active circuit",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapacitorsI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Adds one step of the capacitor if available; if successful, returns 1",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapacitorsI",
          "name":"AddStep"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Subtracts one step of the capacitor; if no more steps, returns 0",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapacitorsI",
          "name":"SubtractStep"
        },
        {
          "args":[
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of steps available in the cap bank to be switched ON",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapacitorsI",
          "name":"AvailableSteps"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Open all steps, all phases of the capacitor",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapacitorsI",
          "name":"Open"
        },
        {
          "args":[
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Close all steps of all phases of the capacitor",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapacitorsI",
          "name":"Close"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Bank kV rating; use LL for 2 or 3 phases, or actual can rating for 1 phase\nSet the bank kV rating; use LL for 2 or 3 phases, or actual can rating for 1 phase",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapacitorsF",
          "name":"kV"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Total bank kvar, distributed equally among phases and steps\nSet the total bank kvar, distributed equally among phases and steps",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapacitorsF",
          "name":"kvar"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"The name of the active capacitor\nSets the active capacitor by name",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapacitorsS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"All capacitor names in the circuit",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CapacitorsV",
          "name":"AllNames"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"A vector of  integers [0..numsteps\u20101] indicating state of each step; if value is \u20101 an error has occurred.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CapacitorsV",
          "name":"States"
        }
      ],
      "name":"Capacitors"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Sets the first CapControl active; returns 0 if none",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapControlsI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Sets the next CapControl active; returns 0 if no more",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapControlsI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Type of automatic controller; for meaning, see CapControlModes\nSet the type of automatic controller; for choices, see CapControlModes",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapControlsI",
          "name":"Mode"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Terminal number on the element that PT and CT are connected to\nSet the terminal number on the element that PT and CT are connected to",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapControlsI",
          "name":"MonitoredTerm"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Bool flag that enables Vmin and Vmax to override the control mode\nSet the Bool flag that enables Vmin and Vmax to override the control mode",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapControlsI",
          "name":"UseVoltOverride"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of CapControls in the active circuit",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapControlsI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Transducer ratio from primary current to control current\nSet the transducer ratio from primary current to control current",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapControlsF",
          "name":"CTRatio"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Transducer ratio from primary voltage to control voltage\nSet the transducer ratio from primary voltage to control voltage",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapControlsF",
          "name":"PTRatio"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Threshold to arm or switch on a step; see Mode for units\nSet the threshold to arm or switch on a step; see Mode for units",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapControlsF",
          "name":"ONSetting"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Threshold to switch off a step; see the particular CapControlModes option for units\nSet the threshold to switch off a step; see the particular CapControlModes option for units",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapControlsF",
          "name":"OFFSetting"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"With VoltOverride, switch off whenever PT voltage exceeds this level\nSet Vmax; with VoltOverride, switch off whenever PT voltage exceeds this level",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapControlsF",
          "name":"Vmax"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"With VoltOverride, switch on whenever PT voltage drops below this level\nSet Vmin; with VoltOverride, switch on whenever PT voltage drops below this level",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapControlsF",
          "name":"Vmin"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                13,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Time delay [s] to switch on after arming; control may reset before actuallyswitching\nSet the time delay [s] to switch on after arming; control may reset before actuallyswitching",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapControlsF",
          "name":"Delay"
        },
        {
          "args":[
            {
              "dss_args":[
                14,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                15,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Time delay [s] before switching off a step; control may reset before actuallyswitching\nSet the time delay [s] before switching off a step; control may reset before actually switching",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapControlsF",
          "name":"DelayOff"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"The name of the active CapControl\nSet the active CapControl by name",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapControlsS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Name of the Capacitor that is controlled\nSet the Capacitor (by name) that is controlled",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapControlsS",
          "name":"Capacitor"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Full name of the element that PT and CT are connected to\nSet the element (by full name) that PT and CT are connected to",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CapControlsS",
          "name":"MonitoredObj"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Names of all CapControls in the circuit",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CapControlsV",
          "name":"AllNames"
        }
      ],
      "name":"CapControls"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of CktElements in the circuit",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitI",
          "name":"NumCktElements"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Total number of Buses in the circuit",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitI",
          "name":"NumBuses"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Total number of Nodes in the circuit",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitI",
          "name":"NumNodes"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Sets the first enabled Power Conversion (PC) element in the circuit to be active; if not successful returns a 0",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitI",
          "name":"FirstPCElement"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Sets the next enabled Power Conversion (PC) element in the circuit to be active; if not successful returns a 0",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitI",
          "name":"NextPCElement"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Sets the first enabled Power Delivery (PD) element in the circuit to be active; if not successful returns a 0",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitI",
          "name":"FirstPDElement"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Sets the next enabled Power Delivery (PD) element in the circuit to be active; if not successful returns a 0",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitI",
          "name":"NextPDElement"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Force all Meters and Monitors to take a sample",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitI",
          "name":"Sample"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Force all Meters and Monitors to save their current buffers",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitI",
          "name":"SaveSample"
        },
        {
          "args":[
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Sets the active bus by integer index. The index is 0 based. That is, the first bus has an index of 0. Returns -1 if an error occurs.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitI",
          "name":"SetActiveBusi"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Sets First element of active class to be the Active element in the active circuit. Returns 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitI",
          "name":"FirstElement"
        },
        {
          "args":[
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Sets the next element of the active class to be the active element in the active circuit. Returns 0 if no more elements.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitI",
          "name":"NextElement"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Forces update to all storage classes. Typically done after a solution. Done automatically in intrinsic solution modes.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitI",
          "name":"UpdateStorage"
        },
        {
          "args":[
            {
              "dss_args":[
                13,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Sets Parent PD element, if any, to be the active circuit element and returns index>0; Returns 0 if it fails or not applicable.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitI",
          "name":"ParentPDElement"
        },
        {
          "args":[
            {
              "dss_args":[
                14,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Calls EndOfTimeStepCleanup in SolutionAlgs",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitI",
          "name":"EndOfTimeStepUpdate"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Executes the DSS capacity function. Start is the per unit load multiplier for the current year at which to start the search. Increment is the per unit value by which the load increments for each step of the analysis. The program sets the load at the Start value the PRESENT YEAR (including growth) and increments the load until something in thecircuit reports an overload or undervoltage violation. The function returns the total load at which the violation occurs or the peak load for the present year if no violations.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitF",
          "name":"Capacity"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "0"
              ],
              "user_args":0
            }
          ],
          "doc":"Name of the active circuit",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Disable a circuit element by name (full name).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitS",
          "name":"Disable"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Enable a circuit element by name (full name).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitS",
          "name":"Enable"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Activate an element of the active circuit by name. Returns a string with the index of the active element.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitS",
          "name":"SetActiveElement"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Sets the active bus by name. Returns a 0 based index of the bus to use for future direct indexing of bus values returned in arrays. Returns -1 if an error occurs.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitS",
          "name":"SetActiveBus"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Sets the active class by name.  Use FirstElement, NextElement to iterate through the class. Returns \u20101 if fails.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CircuitS",
          "name":"SetActiveClass"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Watt and var losses in the entire circuit, complex",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CircuitV",
          "name":"Losses"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                null,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Watt and var losses in all the Line elements in the circuit, complex",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CircuitV",
          "name":"LineLosses"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                null,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Watt and var losses in all the Transformer elements in the circuit that are designated as substations",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CircuitV",
          "name":"SubstationLosses"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                null,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Returns the total power in kW and kvar supplied to the circuit by all Vsource and Isource objects. Does not include Generator objects. Complex.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CircuitV",
          "name":"TotalPower"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                null,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Returns the voltage (complex) for every node in the circuit as a complex vector. The order of the array is the same as AllNodeNames property. The array is constructed bus-by-bus and then by node at each bus. Thus, all nodes from each bus are grouped together.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CircuitV",
          "name":"AllBusVolts"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                null,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Similar to AllBusVolts except magnitude only (in actual volts). Returns the voltage (magnitude) for every node in the circuit as a complex vector.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CircuitV",
          "name":"AllBusVMag"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                null,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The names of all elements",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CircuitV",
          "name":"AllElementNames"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                null,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The names of all buses in the system. See `:AllNodeNames`.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CircuitV",
          "name":"AllBusNames"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                null,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Returns the watt and var losses in each element of the system as a complex vector. Order is the same as AllElementNames.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CircuitV",
          "name":"AllElementLosses"
        },
        {
          "args":[
            {
              "dss_args":[
                9,
                null,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Similar to AllBusVmag except that the magnitudes are reported in per unit for all buses with kVBase defined.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CircuitV",
          "name":"AllBusMagPu"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                null,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Returns the names of all nodes (busname.nodenumber) in the same order as AllBusVolts, AllBusVmag, and AllBusVMagPu",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CircuitV",
          "name":"AllNodeNames"
        },
        {
          "args":[
            {
              "dss_args":[
                11,
                null,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Return the System Y matrix as a complex (dense) matrix",
          "enabled": true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CircuitV",
          "name":"SystemY"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                null,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Returns all distances from a bus to its parent EnergyMeter element, which is generally in the substation, as a variant array of doubles. Order corresponds to that of all bus properties.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CircuitV",
          "name":"AllBusDistances"
        },
        {
          "args":[
            {
              "dss_args":[
                13,
                null,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Returns the distance from all nodes to the parent energy meter that match the designated phase number. Returns a vector of doubles. Matches the order of AllNodeNamesByPhase, AllNodeVmagByPhase, AllNodeVmagPUByPhase.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CircuitV",
          "name":"AllNodeDistances"
        },
        {
          "args":[
            {
              "dss_args":[
                18,
                null,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Complex array of actual node voltages in same order as SystemY matrix.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CircuitV",
          "name":"YNodeVArray"
        },
        {
          "args":[
            {
              "dss_args":[
                19,
                null,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The names of the nodes in the same order as the Y matrix",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CircuitV",
          "name":"YNodeOrder"
        },
        {
          "args":[
            {
              "dss_args":[
                20,
                null,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Vector of doubles containing complex injection currents for the present solution.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CircuitV",
          "name":"YCurrents"
        }
      ],
      "name":"Circuit"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of Terminals on this Circuit Element",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementI",
          "name":"NumTerminals"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of Conductors per Terminal",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementI",
          "name":"NumConductors"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of phases",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementI",
          "name":"NumPhases"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Open the specified terminal and phase, if non\u2010zero.  Else all conductors at terminal.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementI",
          "name":"Open"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Close the specified terminal and phase, if non\u2010zero.  Else all conductors at terminal.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementI",
          "name":"Close"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Bool indicating if the specified terminal and, optionally, phase is open.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementI",
          "name":"IsOpen"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of Properties this Circuit Element.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementI",
          "name":"NumProperties"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Bool indicating whether this element has a SwtControl attached.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementI",
          "name":"HasSwitchControl"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"This element has a CapControl or RegControl attached.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementI",
          "name":"HasVoltControl"
        },
        {
          "args":[
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of controls connected to this device. Use to determine valid range for index into Controller array.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementI",
          "name":"NumControls"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Index into Controller list of OCP Device controlling this CktElement",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementI",
          "name":"OCPDevIndex"
        },
        {
          "args":[
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"0=None; 1=Fuse; 2=Recloser; 3=Relay;  Type of OCP controller device",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementI",
          "name":"OCPDevType"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                13,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Element is enabled\nEnable the active circuit element",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementI",
          "name":"Enabled"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Normal ampere rating for PD Elements\nSet the normal ampere rating for PD Elements",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementF",
          "name":"NormalAmps"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Emergency Ampere Rating for PD elements\nSet the emergency Ampere Rating for PD elements",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementF",
          "name":"EmergAmps"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"For PCElement, get the value of a variable by integer index.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementF",
          "name":"Variablei"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "0"
              ],
              "user_args":0
            }
          ],
          "doc":"Full Name of Active Circuit Element",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                "0"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Display name of the object (not necessarily unique)\nSet the display name of the object (not necessarily unique)",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementS",
          "name":"DisplayName"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                "0"
              ],
              "user_args":0
            }
          ],
          "doc":"Globally unique identifier for this object",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementS",
          "name":"GUID"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                "0"
              ],
              "user_args":0
            }
          ],
          "doc":"Name of the Energy Meter this element is assigned to",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementS",
          "name":"EnergyMeter"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Full name of the i\u2010th controller attached to this element. Ex: str = Controller",
          "enabled":false,
          "function_type":"CtypesFunction",
          "library_function_name":"CktElementS",
          "name":"Controller"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get  Bus definitions to which each terminal is connected. 0\u2010based array.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"BusNames"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Complex array of voltages at terminals",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"Voltages"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Complex array of currents into each conductor of each terminal",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"Currents"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Complex array of powers into each conductor of each terminal",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"Powers"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Total losses in the element: two\u2010element complex array",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"Losses"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Complex array of losses by phase",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"PhaseLosses"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Double array of symmetrical component voltages at each 3\u2010phase terminal",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"SeqVoltages"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Double array of symmetrical component currents into each 3\u2010phase terminal",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"SeqCurrents"
        },
        {
          "args":[
            {
              "dss_args":[
                9,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Double array of sequence powers into each 3\u2010phase teminal",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"SeqPowers"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"All property names of the active device.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"AllPropertyNames"
        },
        {
          "args":[
            {
              "dss_args":[
                11,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Residual currents for each terminal: (mag, angle)",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"Residuals"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"YPrim matrix, column order, complex numbers",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"YPrim"
        },
        {
          "args":[
            {
              "dss_args":[
                13,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Complex double array of Sequence Voltage for all terminals of active circuit element.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"CplxSeqVoltages"
        },
        {
          "args":[
            {
              "dss_args":[
                14,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Complex double array of Sequence Currents for all conductors of all terminals of active circuit element.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"CplxSeqCurrents"
        },
        {
          "args":[
            {
              "dss_args":[
                15,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Variant array of strings listing all the published variable names, if a PCElement. Otherwise, null string.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"AllVariableNames"
        },
        {
          "args":[
            {
              "dss_args":[
                16,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Values of state variables of active element if PC element.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"AllVariableValues"
        },
        {
          "args":[
            {
              "dss_args":[
                17,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Node numbers (representing phases, for example)",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"NodeOrder"
        },
        {
          "args":[
            {
              "dss_args":[
                18,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Currents in magnitude, angle format as a variant array of doubles.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"CurrentsMagAng"
        },
        {
          "args":[
            {
              "dss_args":[
                19,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Voltages at each conductor in magnitude, angle form as variant array of doubles.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"CktElementV",
          "name":"VoltagesMagAng"
        }
      ],
      "name":"CktElement"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of Properties for the active DSS object.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSElementI",
          "name":"NumProperties"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "0"
              ],
              "user_args":0
            }
          ],
          "doc":"Full Name of Active DSS Object (general element or circuit element)",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSElementS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"The names of all properties for the active DSS object.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"DSSElementV",
          "name":"AllPropertyNames"
        }
      ],
      "name":"Element"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of DSS Executive Commands",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSExecutiveI",
          "name":"NumCommands"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of DSS Executive Options",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSExecutiveI",
          "name":"NumOptions"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get i\u2010th command (with i as a string)",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSExecutiveS",
          "name":"Command"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get i\u2010th option (with i as a string)",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSExecutiveS",
          "name":"Option"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get help string for i\u2010th command (with i as a string)",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSExecutiveS",
          "name":"CommandHelp"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get help string for i\u2010th option (with i as a string)",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSExecutiveS",
          "name":"OptionHelp"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get present value of i\u2010th option (with i as a string)",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSExecutiveS",
          "name":"OptionValue"
        }
      ],
      "name":"Executive"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of Fuse elements in the circuit",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"FusesI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the first Fuse to be the active fuse. Returns 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"FusesI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Advance the active Fuse element pointer to the next fuse. Returns 0 if no more fuses.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"FusesI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Terminal number to which the fuse is connected.\nSet the terminal number to which the fuse is connected.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"FusesI",
          "name":"MonitoredTerm"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Manual opening of fuse",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"FusesI",
          "name":"Open"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Close the fuse back in and reset.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"FusesI",
          "name":"Close"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Current state of the fuses. TRUE if any fuse on any phase is blown. Else FALSE.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"FusesI",
          "name":"IsBlown"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get/set active fuse by index into the list of fuses. 1 based: 1..count\nSet Fuse active by index into the list of fuses. 1..count",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"FusesI",
          "name":"Idx"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of phases, this fuse.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"FusesI",
          "name":"NumPhases"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Multiplier or actual amps for the TCCcurve object. Defaults to 1.0. Multipliy current values of TCC curve by this to get actual amps.\nSet the multiplier or actual amps for the TCCcurve object. Defaults to 1.0. Multipliy current values of TCC curve by this to get actual amps.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"FusesF",
          "name":"RatedCurrent"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the active Fuse element\nSet the name of the active Fuse element",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"FusesS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Full name of the circuit element to which the fuse is connected.\nSet the full name of the circuit element to which the fuse is connected.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"FusesS",
          "name":"MonitoredObj"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Full name of the circuit element switch that the fuse controls. Defaults to the MonitoredObj.\nSet the full name of the circuit element switch that the fuse controls. Defaults to the MonitoredObj.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"FusesS",
          "name":"SwitchedObj"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Name of the TCCcurve object that determines fuse blowing.\nSet the name of the TCCcurve object that determines fuse blowing.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"FusesS",
          "name":"TCCCurve"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":" Names of all Fuses in the circuit",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"FusesV",
          "name":"AllNames"
        }
      ],
      "name":"Fuses"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Sets first Generator to be active.  Returns 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"GeneratorsI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Sets next Generator to be active.  Returns 0 if no more.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"GeneratorsI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Indicates whether the generator is forced ON regardles of other dispatch criteria.\nSets indication whether the generator is forced ON regardles of other dispatch criteria.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"GeneratorsI",
          "name":"ForcedON"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Number of phases\nSet the number of phases",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"GeneratorsI",
          "name":"Phases"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Number of Generator Objects in Active Circuit",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"GeneratorsI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get/Set active Generator by index into generators list.  1..Count\nSet active Generator by index into generators list.  1..Count",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"GeneratorsI",
          "name":"Idx"
        },
        {
          "args":[
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Generator model\nSet the Generator model",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"GeneratorsI",
          "name":"Model"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Voltage base for the active generator, kV\nSet the voltage base for the active generator, kV",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"GeneratorsF",
          "name":"kV"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"kW output for the active generator. kvar is updated for current power factor.\nSet the kW output for the active generator. kvar is updated for current power factor.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"GeneratorsF",
          "name":"kW"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"kvar output for the active generator. Updates power factor based on present kW value.\nSet the kvar output for the active generator. Updates power factor based on present kW value.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"GeneratorsF",
          "name":"kvar"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Power factor (pos. = producing vars)\nSet the power factor (pos. = producing vars)",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"GeneratorsF",
          "name":"PF"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the KVA rating of the generator.\nSet the KVA rating of the generator.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"GeneratorsF",
          "name":"kVARated"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the Vmaxpu for Generator Model.\nSet the Vmaxpu for Generator Model.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"GeneratorsF",
          "name":"Vmaxpu"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                13,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the Vminpu for Generator Model.\nSet the Vminpu for Generator Model.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"GeneratorsF",
          "name":"Vminpu"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Active generator name.\nSets a generator active by name.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"GeneratorsS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"All generator names",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"GeneratorsV",
          "name":"AllNames"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Array of Names of all generator energy meter registers",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"GeneratorsV",
          "name":"RegisterNames"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Array of valus in generator energy meter registers.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"GeneratorsV",
          "name":"RegisterValues"
        }
      ],
      "name":"Generators"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"The name of the active property.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSProperties",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"The description of the active property.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSProperties",
          "name":"Description"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":1
            }
          ],
          "commented_out_args":{
              "dss_args":[
                3,
                "1"
              ],
              "user_args":2
          },
          "doc":"Read value of a property or Write value of a property",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSProperties",
          "name":"Value"
        }
      ],
      "name":"Properties"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Returns the number of Isource objects currently defined in the active circuit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"IsourceI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the first ISource to be active; returns 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"IsourceI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the next ISource to be active; returns 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"IsourceI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the magnitude of the Isource in Amps.\nSet the magnitude of the Isource in Amps.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"IsourceF",
          "name":"Amps"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the phase angle of the Isource in degrees.\nSet the phase angle of the Isource in degrees.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"IsourceF",
          "name":"AngleDeg"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the frequency of the Isource in Hz.\nSet the frequency of the Isource in Hz.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"IsourceF",
          "name":"Frequency"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the active Isource object.\nSet the name of the active Isource object.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"IsourceS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Names of all Isources in the circuit.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"IsourceV",
          "name":"AllNames"
        }
      ],
      "name":"Isource"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the first element active. Returns 0 if no Lines. Otherwise, index of the line element.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the next element active. Returns 0 if no Lines. Otherwise, index of the line element.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the number of phases of the active line object.\nSet the number of phases of the active line object.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesI",
          "name":"Phases"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the number of customers on this line section.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesI",
          "name":"NumCust"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the parents of the active Line to be the active Line. Return 0 if no parent or action fails.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesI",
          "name":"Parent"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the number of Line Objects in Active Circuit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the units of the line (distance, check manual for details).\nSet the units of the line (distance, check manual for details).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesI",
          "name":"Units"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the length of line section in units compatible with the LineCode definition.\nSet the length of line section in units compatible with the LineCode definition.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesF",
          "name":"Length"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the positive sequence resistance, ohm per unit length.\nSet the positive sequence resistance, ohm per unit length.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesF",
          "name":"R1"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the positive sequence reactance, ohm per unit length.\nSet the positive sequence reactance, ohm per unit length.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesF",
          "name":"X1"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the zero sequence resistance, ohm per unit length.\nSet the zero sequence resistance, ohm per unit length.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesF",
          "name":"R0"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the zero sequence reactance, ohm per unit length.\nSet the zero sequence reactance, ohm per unit length.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesF",
          "name":"X0"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the positive sequence capacitance, nanofarads per unit length.\nSet the positive sequence capacitance, nanofarads per unit length.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesF",
          "name":"C1"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                13,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the zero sequence capacitance, nanofarads per unit length.\nSet the zero sequence capacitance, nanofarads per unit length.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesF",
          "name":"C0"
        },
        {
          "args":[
            {
              "dss_args":[
                14,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                15,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the normal ampere rating of Line.\nSet the normal ampere rating of Line.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesF",
          "name":"NormAmps"
        },
        {
          "args":[
            {
              "dss_args":[
                16,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                17,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the emergency (maximum) ampere rating of Line.\nSet the emergency (maximum) ampere rating of Line.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesF",
          "name":"EmergAmps"
        },
        {
          "args":[
            {
              "dss_args":[
                18,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                19,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the earth return value used to compute line impedances at power frequency.\nSet the earth return value used to compute line impedances at power frequency.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesF",
          "name":"Rg"
        },
        {
          "args":[
            {
              "dss_args":[
                20,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                21,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the earth return reactance value used to compute line impedances at power frequency.\nSet the earth return reactance value used to compute line impedances at power frequency.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesF",
          "name":"Xg"
        },
        {
          "args":[
            {
              "dss_args":[
                22,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                23,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the earth resistivity, m-ohms.\nSet the earth resistivity, m-ohms.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesF",
          "name":"Rho"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the active Line element.\nSet the name of the Line element to set it active.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of bus for terminal 1.\nSet the name of bus for terminal 1.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesS",
          "name":"Bus1"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of bus for terminal 2.\nSet the name of bus for terminal 2.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesS",
          "name":"Bus2"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of LineCode object that defines the impedances.\nSet the name of LineCode object that defines the impedances.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesS",
          "name":"LineCode"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                9,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the Line geometry code.\nSet the name of the Line geometry code.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesS",
          "name":"Geometry"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                11,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the Line spacing code.\nSet the name of the Line spacing code.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LinesS",
          "name":"Spacing"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get the name of all Line Objects.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"LinesV",
          "name":"AllNames"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get the resistance matrix (full), ohms per unit length. Variant array of doubles.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"LinesV",
          "name":"RMatrix"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get the reactance matrix (full), ohms per unit length. Variant array of doubles.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"LinesV",
          "name":"XMatrix"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get the capacitance matrix (full), nanofarads per unit length. Variant array of doubles.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"LinesV",
          "name":"CMatrix"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get the YPrimitive of the active Line.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"LinesV",
          "name":"Yprim"
        }
      ],
      "name":"Lines"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Allows to set the active load into the first load registered in the active circuit. As a result, this property will return the number 1. The parameter argument can be filled with a 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoads",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the active load into the next load registered in the active circuit. As a result, this property will set the index of the active load. The parameter argument can be filled with a 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoads",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The index of the active load. The parameter argument can be filled with a 0.\nSet the index of the active load. The parameter argument must contain the index of the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoads",
          "name":"Idx"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Returns the number of load elements within the active circuit. The parameter argument can be filled with a 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoads",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The code number used to separate Loads by class or group. The parameter argument can be filled with a 0.\nThe code number used to separate loads by class or group. The parameter argument can be filled with a 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoads",
          "name":"Class"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The model of the active load. The parameter argument can be filled with a 0.\nSet the model of the active load using the parameter argument. return a 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoads",
          "name":"Model"
        },
        {
          "args":[
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The number of customer of the active load. The parameter argument can be filled with a 0.\nSet the number of customers of the active load using the parameter argument. return a 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoads",
          "name":"NumCust"
        },
        {
          "args":[
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                12,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"\n",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoads",
          "name":"Status"
        },
        {
          "args":[
            {
              "dss_args":[
                13,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                14,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"If true, loads are line to line.\nSet whether loads are delta (line to line).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoads",
          "name":"IsDelta"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The kW property of the active load. The parameter argument can be filled with a 0.\nSet the kW property of the active load. The parameter argument must contain the new value in kW for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"kW"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The kV property of the active load. The parameter argument can be filled with a 0.\nSet the kV property of the active load. The parameter argument must contain the new value in kV for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"kV"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The kvar property of the active load. The parameter argument can be filled with a 0.\nSet the kvar property of the active load. The parameter argument must contain the new value in kvar for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"kvar"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The pf property of the active load. The parameter argument can be filled with a 0.\nSet the pf property of the active load. The parameter argument must contain the new value in pf for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"PF"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The PctMean property of the active load. The parameter argument can be filled with a 0.\nSet the PctMean property of the active load. The parameter argument must contain the new value in PctMean for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"PctMean"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The PctStdDev property of the active load. The parameter argument can be filled with a 0.\nSet the PctStdDev property of the active load. The parameter argument must contain the new value in PctStdDev for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"PctStdDev"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                13,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The AllocationFactor property of the active load. The parameter argument can be filled with a 0.\nSet the AllocationFactor property of the active load. The parameter argument must contain the new value in AllocationFactor for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"AllocationFactor"
        },
        {
          "args":[
            {
              "dss_args":[
                14,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                15,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The CFactor property of the active load. The parameter argument can be filled with a 0.\nSet the CFactor property of the active load. The parameter argument must contain the new value in CFactor for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"CFactor"
        },
        {
          "args":[
            {
              "dss_args":[
                16,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                17,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The CVRWatts property of the active load. The parameter argument can be filled with a 0.\nSet the CVRWatts property of the active load. The parameter argument must contain the new value in CVRWatts for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"CVRwatts"
        },
        {
          "args":[
            {
              "dss_args":[
                18,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                19,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The CVRvars property of the active load. The parameter argument can be filled with a 0.\nSet the CVRvars property of the active load. The parameter argument must contain the new value in CVRvars for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"CVRvars"
        },
        {
          "args":[
            {
              "dss_args":[
                20,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                21,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The kva property of the active load. The parameter argument can be filled with a 0.\nSet the kva property of the active load. The parameter argument must contain the new value in kva for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"kVABase"
        },
        {
          "args":[
            {
              "dss_args":[
                22,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                23,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The kWh property of the active load. The parameter argument can be filled with a 0.\nSet the kWh property of the active load. The parameter argument must contain the new value in kWh for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"kWh"
        },
        {
          "args":[
            {
              "dss_args":[
                24,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                25,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The kWhdays property of the active load. The parameter argument can be filled with a 0.\nSet the kWhdays property of the active load. The parameter argument must contain the new value in kWhdays for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"kWhDays"
        },
        {
          "args":[
            {
              "dss_args":[
                26,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                27,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The RNeut (neutral resistance for wye connected loads) property of the active load. The parameter argument can be filled with a 0.\nSet the RNeut (neutral resistance for wye connected loads) property of the active load. The parameter argument must contain the new value in RNeut for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"Rneut"
        },
        {
          "args":[
            {
              "dss_args":[
                28,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                29,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The VMaxpu property of the active load. The parameter argument can be filled with a 0.\nSet the VMaxpu property of the active load. The parameter argument must contain the new value in VMaxpu for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"Vmaxpu"
        },
        {
          "args":[
            {
              "dss_args":[
                30,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                31,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The VMinemerg property of the active load. The parameter argument can be filled with a 0.\nSet the VMinemerg property of the active load. The parameter argument must contain the new value in VMinemerg for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"VminEmerg"
        },
        {
          "args":[
            {
              "dss_args":[
                32,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                33,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The VMinnorm property of the active load. The parameter argument can be filled with a 0.\nSet the VMinnorm property of the active load. The parameter argument must contain the new value in VMinnorm for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"VminNorm"
        },
        {
          "args":[
            {
              "dss_args":[
                34,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                35,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The VMinpu property of the active load. The parameter argument can be filled with a 0.\nSet the VMinpu property of the active load. The parameter argument must contain the new value in VMinpu for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"Vminpu"
        },
        {
          "args":[
            {
              "dss_args":[
                36,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                37,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The xfKVA (Rated service transformer KVA for load allocation, using Allocationfactor. Affects kW, kvar and pf.) property of the active load. The parameter argument can be filled with a 0.\nSet the xfKVA (Rated service transformer KVA for load allocation, using Allocationfactor. Affects kW, kvar and pf.) property of the active load. The parameter argument must contain the new value in xfKVA for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"XfkVA"
        },
        {
          "args":[
            {
              "dss_args":[
                38,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                39,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The Xneut property of the active load. The parameter argument can be filled with a 0.\nSet the Xneut property of the active load. The parameter argument must contain the new value in Xneut for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"Xneut"
        },
        {
          "args":[
            {
              "dss_args":[
                40,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                41,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The PctSeriesRL (Percent of Load that is modeled as series R-L for harmonic studies) property of the active load. The parameter argument can be filled with a 0.\nSet the PctSeriesRL (Percent of Load that is modeled as series R-L for harmonic studies) property of the active load. The parameter argument must contain the new value in PctSeriesRL for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"puSeriesRL"
        },
        {
          "args":[
            {
              "dss_args":[
                42,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                43,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The RelWeight (relative weighting factor) property of the active load. The parameter argument can be filled with a 0.\nSet the RelWeight (relative weighting factor) property of the active load. The parameter argument must contain the new value in RelWeight for the desired active load. The return value will be equal to 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsF",
          "name":"RelWeighting"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"The Name property of the active load. The parameter argument can be filled with an empty string.\nSet the active load by specifying the Name load. The parameter argument must contain the Name of the load to activate. The return value will be equal to empty.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"The CVRCUrve property of the active load. The parameter argument can be filled with an empty string.\nSet the CVRCurve property for the active load. The parameter argument must contain the Name of the new CVRCurve to be linked to the active load. The return value will be equal to empty.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsS",
          "name":"CVRCurve"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"The daily property of the active load. The parameter argument can be filled with an empty string.\nSet the daily property for the active load. The parameter argument must contain the Name of the new daily to be linked to the active load. The return value will be equal to empty.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsS",
          "name":"Daily"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"The duty property of the active load. The parameter argument can be filled with an empty string.\nSet the duty property for the active load. The parameter argument must contain the Name of the new duty to be linked to the active load. The return value will be equal to empty.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsS",
          "name":"Duty"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                9,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"The Spectrum property of the active load. The parameter argument can be filled with an empty string.\nSet the Spectrum property for the active load. The parameter argument must contain the Name of the new Spectrum to be linked to the active load. The return value will be equal to empty.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsS",
          "name":"Spectrum"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                11,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"The Yearly property of the active load. The parameter argument can be filled with an empty string.\nSet the Yearly property for the active load. The parameter argument must contain the Name of the new Yearly to be linked to the active load. The return value will be equal to empty.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsS",
          "name":"Yearly"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                13,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"The Growth property of the active load. The parameter argument can be filled with an empty string.\nSet the Growth property for the active load. The parameter argument must contain the Name of the new Growth to be linked to the active load. The return value will be equal to empty.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"DSSLoadsS",
          "name":"Growth"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"The names of all the loads present in the active circuit. The result is delivered as variant, however, the content of this variant is an array of strings.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"DSSLoadsV",
          "name":"AllNames"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"The array of 7 elements (doubles) for ZIP property of the active Load object.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"DSSLoadsV",
          "name":"ZipV"
        }
      ],
      "name":"Loads"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The number of LoadShape objects currently defined in LoadShape collection.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LoadShapeI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the first LoadShape active and return integer index of the LoadShape. Returns 0 if no more.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LoadShapeI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the next LoadShape active and return integer index of the LoadShape. Returns 0 if no more.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LoadShapeI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the number of points in active LoadShape.\nSet the number of points in active LoadShape.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LoadShapeI",
          "name":"Npts"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"normalizes the P and Q curves based on either Pbase, Qbase or simply the peak value of the curve.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LoadShapeI",
          "name":"Normalize"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get a TRUE/FALSE (1/0) to let Loads know to use the actual value in the curve rather than use the value as a multiplier.\nSet a TRUE/FALSE (1/0 - Argument) to let Loads know to use the actual value in the curve rather than use the value as a multiplier.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LoadShapeI",
          "name":"UseActual"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the fixed interval time value, hours.\nSet the fixed interval time value, hours.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LoadShapeF",
          "name":"HrInterval"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the fixed interval time value, in minutes.\nSet the fixed interval time value, in minutes.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LoadShapeF",
          "name":"MinInterval"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the base for normalizing P curve. If left at zero, the peak value is used.\nSet the base for normalizing P curve. If left at zero, the peak value is used.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LoadShapeF",
          "name":"PBase"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the base for normalizing Q curve. If left at zero, the peak value is used.\nSet the base for normalizing Q curve. If left at zero, the peak value is used.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LoadShapeF",
          "name":"QBase"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the fixed interval data time interval, seconds.\nSet the fixed interval data time interval, seconds.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LoadShapeF",
          "name":"SInterval"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the active LoadShape object.\nSet the name of the active LoadShape object.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"LoadShapeS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Names of all of the load shapes",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"LoadShapeV",
          "name":"AllNames"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get a variant array of doubles for the P multiplier in the LoadShape.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"LoadShapeV",
          "name":"PMult"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get a variant array of doubles for the Q multiplier in the LoadShape.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"LoadShapeV",
          "name":"QMult"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get a time array in hours corresponding to P and Q multipliers when the Interval = 0.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"LoadShapeV",
          "name":"TimeArray"
        }
      ],
      "name":"LoadShape"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the first Energy Meter active. Returns 0 if no Monitors.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the next energy Meter Active. Returns 0 if no more.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Resets the active Meter object.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"Reset"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Resets all Meter object.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"ResetAll"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Causes active meter to take a sample.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"Sample"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Causes active meter to save its current sample buffer to its meter stream. Then you can access the Bytestream or channel data. Most standard solution modes do this automatically.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"Save"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The number of metered terminal by the active Energy Meter.\nSet the number of metered terminal by the active Energy Meter.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"MeteredTerminal"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Returns a global flag (1=true, 0=false) to indicate if Demand Interval (DI) files have been properly opened.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"DIFilesAreOpen"
        },
        {
          "args":[
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Causes all Energy Meters to take a sample of the present state. Returns 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"SampleAll"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"save all Energy Meter buffers to their respective file streams. Returns 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"SaveAll"
        },
        {
          "args":[
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Opens Demand Interval (DI) files. Returns 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"OpenAllDIFiles"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Close all Demand Interval (DI) files. Necessary at the end of a run.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"CloseAllDIFiles"
        },
        {
          "args":[
            {
              "dss_args":[
                13,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The number of zone end elements in the active meter zone.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"CountEndElements"
        },
        {
          "args":[
            {
              "dss_args":[
                14,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The number of Energy Meters in the Active Circuit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                15,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The number of branches in active Energy Meter zone (same as sequencelist size).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"CountBranches"
        },
        {
          "args":[
            {
              "dss_args":[
                16,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                17,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The index into meter's SequenceList that contains branch pointers in lexical order. Earlier index guaranteed to be up line from later index. Sets PDElement active.\nSet the index into meter's SequenceList that contains branch pointers in lexical order. Earlier index guaranteed to be up line from later index. Sets PDElement active.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"SequenceList"
        },
        {
          "args":[
            {
              "dss_args":[
                18,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"calculates SAIFI, etc. if the Argument is equal to 1 assume restoration, otherwise it will not.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"DoReliabilityCalc"
        },
        {
          "args":[
            {
              "dss_args":[
                19,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The size of Sequence List.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"SeqListSize"
        },
        {
          "args":[
            {
              "dss_args":[
                20,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The total number of customers in this zone (down line from the Energy Meter).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"TotalCustomers"
        },
        {
          "args":[
            {
              "dss_args":[
                21,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The number of feeder sections in this meter's zone.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"NumSections"
        },
        {
          "args":[
            {
              "dss_args":[
                22,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the designated section (argument) if the index is valid.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"SetActiveSection"
        },
        {
          "args":[
            {
              "dss_args":[
                23,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The type of OCP device: {1=fuse | 2+ recloser | 3= relay}.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"OCPDeviceType"
        },
        {
          "args":[
            {
              "dss_args":[
                24,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The number of customers in the active section.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"NumSectionCustomers"
        },
        {
          "args":[
            {
              "dss_args":[
                25,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The number of branches (Lines) in the active section.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"NumSectionBranches"
        },
        {
          "args":[
            {
              "dss_args":[
                26,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The Sequence Index of the branch at the head of this section.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"SectSeqidx"
        },
        {
          "args":[
            {
              "dss_args":[
                27,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The total customers down line from this section.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersI",
          "name":"SectTotalCust"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"SAIFI for this meter's zone. Execute reliability calc method first.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersF",
          "name":"SAIFI"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The SAIFI based on kW rather than number of customers. Get after reliability calcs.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersF",
          "name":"SAIFIkW"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The SAIDI for this meter zone. Execute DoreliabilityCalc first.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersF",
          "name":"SAIDI"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The total customer interruptions for this meter zone based on reliability calcs.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersF",
          "name":"CustInterrupts"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The average Repair Time in this Section of the meter zone.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersF",
          "name":"AvgRepairTime"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The sum of Fault Rate time Repair Hours in this section of the meter zone.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersF",
          "name":"FaultRateXRepairHrs"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The sum of the branch fault rates in this section of the meter's zone.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersF",
          "name":"SumBranchFltRates"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"The active Energy Meter's name.\nSet the active Energy Meter's name.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"The name of the metered element (considering the active Energy Meter).\nSet the name of the metered element (considering the active Energy Meter).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MetersS",
          "name":"MeteredElement"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"All Energy Meter names.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"MetersV",
          "name":"AllNames"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Strings containing the names of the registers.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"MetersV",
          "name":"RegisterNames"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Values contained in the Meter registers for the active Meter.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"MetersV",
          "name":"RegisterValues"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"The totals for all registers of all Meters.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"MetersV",
          "name":"Totals"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Returns an array of doubles with the Peak Current Property.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"MetersV",
          "name":"PeakCurrent"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"The magnitude of the real part of the Calculated Current (normally determined by solution) for the meter to force some behavior on Load Allocation.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"MetersV",
          "name":"CalcCurrent"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"An array of doubles: allocation factors for the active Meter.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"MetersV",
          "name":"AllocFactors"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"A vector of names of all zone end elements.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"MetersV",
          "name":"AllEndElements"
        },
        {
          "args":[
            {
              "dss_args":[
                11,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"A wide string list of all branches in zone of the active Energy Meter object.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"MetersV",
          "name":"AllBranchesInZone"
        }
      ],
      "name":"Meters"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the first monitor active. Returns 0 if no Monitors.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the next monitor active. Returns 0 if no more.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Resets the active Monitor object.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsI",
          "name":"Reset"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Resets all Monitor object.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsI",
          "name":"ResetAll"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Causes active monitor to take a sample.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsI",
          "name":"Sample"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Causes active monitor to save its current sample buffer to its monitor stream. Then you can access the Bytestream or channel data. Most standard solution modes do this automatically.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsI",
          "name":"Save"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Converts monitor file into text and displays with text editor.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsI",
          "name":"Show"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The monitor mode (bitmask integer - see DSS Help).\nSet the monitor mode (bitmask integer - see DSS Help).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsI",
          "name":"Mode"
        },
        {
          "args":[
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Returns number of samples in Monitor at present.",
          "enabled":false,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsI",
          "name":"SampleCount"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Causes all Monitors to take a sample of the present state. Returns 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsI",
          "name":"SampleAll"
        },
        {
          "args":[
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Save all Monitor buffers to their respective file streams. Returns 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsI",
          "name":"SaveAll"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The number of Monitors.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                13,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Post-process monitor samples taken so far, e.g., Pst for mode = 4.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsI",
          "name":"Process"
        },
        {
          "args":[
            {
              "dss_args":[
                14,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Makes that all Monitors post-process the data taken so far.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsI",
          "name":"ProcessAll"
        },
        {
          "args":[
            {
              "dss_args":[
                15,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The Monitor File version (integer).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsI",
          "name":"FileVersion"
        },
        {
          "args":[
            {
              "dss_args":[
                16,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The size of each record in ByteStream.",
          "enabled":false,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsI",
          "name":"RecordSize"
        },
        {
          "args":[
            {
              "dss_args":[
                17,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The number of Channels on the active Monitor.",
          "enabled":false,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsI",
          "name":"NumChannels"
        },
        {
          "args":[
            {
              "dss_args":[
                18,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                19,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The terminal number of element being monitored.\nSet the terminal number of element being monitored.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsI",
          "name":"Terminal"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "0"
              ],
              "user_args":0
            }
          ],
          "doc":"The name of the CSV file associated with active monitor.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsS",
          "name":"FileName"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"The active Monitor object by name.\nSet the active Monitor object by name.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                4,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"The full name of element being monitored by the active Monitor.\nSet the full name of element being monitored by the active Monitor.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"MonitorsS",
          "name":"Element"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"An array of all Monitor names (array of strings).",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"MonitorsV",
          "name":"AllNames"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"A byte array containing monitor stream values. Make sure a 'save' is done first (standard solution modes do this automatically).",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"MonitorsV",
          "name":"ByteStream"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"The header string; vector of strings containing Channel Names.",
          "enabled":false,
          "function_type":"VarArrayFunction",
          "library_function_name":"MonitorsV",
          "name":"DblHourS"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"A vector of doubles containing time value in hours for the time-sampled monitor values; empty if frequency-sampled values for harmonics solution (see dblFreq).",
          "enabled":false,
          "function_type":"VarArrayFunction",
          "library_function_name":"MonitorsV",
          "name":"DblHour"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"A vector of doubles containing time values for harmonics mode solutions; empty for time mode solutions (use dblHour).",
          "enabled":false,
          "function_type":"VarArrayFunction",
          "library_function_name":"MonitorsV",
          "name":"DblFreqS"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"A vector of doubles for the specified channel (usage: MyArray = DSSmonitor.Channel(i)) A save or SaveAll should be executed first. Done automatically by most standard solution modes.",
          "enabled":false,
          "function_type":"VarArrayFunction",
          "library_function_name":"MonitorsV",
          "name":"DblFreq"
        }
      ],
      "name":"Monitors"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Return next parameter as a long integer.",
          "enabled":false,
          "function_type":"CtypesFunction",
          "library_function_name":"ParserI",
          "name":"IntValue"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Reset delimiters to their default values.",
          "enabled":false,
          "function_type":"CtypesFunction",
          "library_function_name":"ParserI",
          "name":"ResetDelimiters"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"In the default is false (0). If true (1) Parser automatically advances to next token after DblValue, IntValue, or StrValue. Simpler when you don't need to check for parameter names.\nIn the default is false (0). If true (1) Parser automatically advances to next token after DblValue, IntValue, or StrValue. Simpler when you don't need to check for parameter names.",
          "enabled":false,
          "function_type":"CtypesFunction",
          "library_function_name":"ParserI",
          "name":"AutoIncrement"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Returns next parameter as a double.",
          "enabled":false,
          "function_type":"CtypesFunction",
          "library_function_name":"ParserF",
          "name":"DblValue"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get a string to be parsed. Loading this string resets the Parser to the beginning of the line. Then parse off the tokens in sequence.\nSet a string to be parsed. Loading this string resets the Parser to the beginning of the line. Then parse off the tokens in sequence.",
          "enabled":false,
          "function_type":"CtypesFunction",
          "library_function_name":"ParserS",
          "name":"CmdString"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "0"
              ],
              "user_args":0
            }
          ],
          "doc":"Get next token and return tag name (before = sign) if any. See Autoincrement.",
          "enabled":false,
          "function_type":"CtypesFunction",
          "library_function_name":"ParserS",
          "name":"NextParam"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                "0"
              ],
              "user_args":0
            }
          ],
          "doc":"Return next parameter as a string.",
          "enabled":false,
          "function_type":"CtypesFunction",
          "library_function_name":"ParserS",
          "name":"StrValue"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the characters used for White space in the command string. Default in blank and Tab.\nSet the characters used for White space in the command string. Default in blank and Tab.",
          "enabled":false,
          "function_type":"CtypesFunction",
          "library_function_name":"ParserS",
          "name":"WhiteSpace"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the string containing the characters for quoting in OpenDSS scripts. Matching pairs defined in EndQuote. Default is \"([{.\nSet the string containing the characters for quoting in OpenDSS scripts. Matching pairs defined in EndQuote. Default is \"([{.",
          "enabled":false,
          "function_type":"CtypesFunction",
          "library_function_name":"ParserS",
          "name":"BeginQuote"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                9,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the string containing the characters, in order, that match the beginning quote characters in BeginQuote. Default is \")]}.\nSet the string containing the characters, in order, that match the beginning quote characters in BeginQuote. Default is \")]}.",
          "enabled":false,
          "function_type":"CtypesFunction",
          "library_function_name":"ParserS",
          "name":"EndQuote"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                11,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the string defining hard delimiters used to separate token on the command string. Default is , and =. The = separates token name from token value. These override whitespace to separate tokens.\nSet the string defining hard delimiters used to separate token on the command string. Default is , and =. The = separates token name from token value. These override whitespace to separate tokens.",
          "enabled":false,
          "function_type":"CtypesFunction",
          "library_function_name":"ParserS",
          "name":"Delimiters"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Returns token as vector of doubles. For parsing quoted array syntax.",
          "enabled":false,
          "function_type":"VarArrayFunction",
          "library_function_name":"ParserV",
          "name":"Vector"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Use this property to parse a Matrix token in OpenDSS format. Returns square matrix of order specified. Order same as default fortran order: column by column.",
          "enabled":false,
          "function_type":"VarArrayFunction",
          "library_function_name":"ParserV",
          "name":"Matrix"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Use this property to parse a Matrix token in lower triangular form. Symmetry is forced.",
          "enabled":false,
          "function_type":"VarArrayFunction",
          "library_function_name":"ParserV",
          "name":"SymMatrix"
        }
      ],
      "name":"Parser"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get number of PDElements in active circuit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PDElementsI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the first enabled PD element to be the active element. Returns 0 if none found.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PDElementsI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the next enabled PD element to be the active element. Returns 0 if none found.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PDElementsI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"returns 1 if the PD element should be treated as a shunt element rather than a series element. Applies to capacitor and reactor elements in particular.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PDElementsI",
          "name":"IsShunt"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the number of customers in this branch.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PDElementsI",
          "name":"NumCustomers"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the total number of customers from this branch to the end of the zone.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PDElementsI",
          "name":"TotalCustomers"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the parent PD element to be the active circuit element. Returns 0 if no more elements upline.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PDElementsI",
          "name":"ParentPDElement"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the number of the terminal of active PD element that is on the 'from' side. This is set after the meter zone is determined.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PDElementsI",
          "name":"FromTerminal"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the integer ID of the feeder section that this PDElement branch is part of.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PDElementsI",
          "name":"SectionID"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the number of failures per year. For LINE elements: Number of failures per unit length per year.\nSet the number of failures per year. For LINE elements: Number of failures per unit length per year.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PDElementsF",
          "name":"FaultRate"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the percent of faults that are permanent (require repair). Otherwise, fault is assumed to be transient/temporary.\nSet the percent of faults that are permanent (require repair). Otherwise, fault is assumed to be transient/temporary.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PDElementsF",
          "name":"PctPermanent"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the failure rate for this branch. Faults per year including length of line.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PDElementsF",
          "name":"Lambda"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the accumulated failure rate for this branch on down line.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PDElementsF",
          "name":"AccumulatedL"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the average time to repair a permanent fault on this branch, hours.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PDElementsF",
          "name":"RepairTime"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the total miles of line from this element to the end of the zone. For recloser siting algorithm.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PDElementsF",
          "name":"TotalMiles"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the active PDElement, returns null string if active element id not PDElement.\nSet the name of the active PDElement, returns null string if active element id not PDElement.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PDElementsS",
          "name":"Name"
        }
      ],
      "name":"PDElements"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the active PVSystem Object.\nSet the name of the active PVSystem Object.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PVsystemsS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The number of PVSystem objects currently defined in the active circuit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PVsystemsI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the first PVSystem to be active; returns 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PVsystemsI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the next PVSystem to be active; returns 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PVsystemsI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the active PVSystem by index; 1..Count.\nSet the active PVSystem by index; 1..Count.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PVsystemsI",
          "name":"Idx"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the present value of the Irradiance property in W/sq-m.\nSet the present value of the Irradiance property in W/sq-m.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PVsystemsF",
          "name":"Irradiance"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the kW output.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PVsystemsF",
          "name":"kW"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the kvar value.\nSet the kvar value.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PVsystemsF",
          "name":"kvar"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the power factor value.\nSet the power factor value.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PVsystemsF",
          "name":"pf"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the rated kVA.\nSet the rated kVA.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"PVsystemsF",
          "name":"kVARated"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get a vector of strings with names of all PVSystems in active circuit.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"PVsystemsV",
          "name":"AllNames"
        }
      ],
      "name":"PVsystems"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get number of Reclosers in active circuit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ReclosersI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set first recloser to be active Circuit Element. Returns 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ReclosersI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set next recloser to be active Circuit Element. Returns 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ReclosersI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the terminal number of Monitored Object for the Recloser.\nSet the terminal number of Monitored Object for the Recloser.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ReclosersI",
          "name":"MonitoredTerm"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the terminal of the controlled device being switched by the Recloser.\nSet the terminal of the controlled device being switched by the Recloser.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ReclosersI",
          "name":"SwitchedTerm"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the number of fast shots.\nSet the number of fast shots.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ReclosersI",
          "name":"NumFast"
        },
        {
          "args":[
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the number of shots to lockout (fast + delayed).\nSet the number of shots to lockout (fast + delayed).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ReclosersI",
          "name":"Shots"
        },
        {
          "args":[
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Open recloser's controlled element and lock out the recloser.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ReclosersI",
          "name":"Open"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Close the switched object controlled by the recloser. Resets recloser to first operation.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ReclosersI",
          "name":"Close"
        },
        {
          "args":[
            {
              "dss_args":[
                13,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                14,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the active recloser by index into the recloser list. 1..Count.\nSet the active recloser by index into the recloser list. 1..Count.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ReclosersI",
          "name":"Idx"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the phase trip curve multiplier or actual amps.\nSet the phase trip curve multiplier or actual amps.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ReclosersF",
          "name":"PhaseTrip"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the phase instantaneous curve multiplier or actual amps.\nSet the phase instantaneous curve multiplier or actual amps.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ReclosersF",
          "name":"PhaseInst"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the ground (3I0) trip multiplier or actual amps.\nSet the ground (3I0) trip multiplier or actual amps.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ReclosersF",
          "name":"GroundTrip"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the ground (3I0) instantaneous trip setting - curve multiplier or actual amps.\nSet the ground (3I0) instantaneous trip setting - curve multiplier or actual amps.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ReclosersF",
          "name":"GroundInst"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the active Recloser Object.\nSet the name of the active Recloser Object.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ReclosersS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the full name of object this Recloser is monitoring.\nSet the full name of object this Recloser is monitoring.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ReclosersS",
          "name":"MonitoredObj"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the full name of the circuit element that is being switched by this Recloser.\nSet the full name of the circuit element that is being switched by this Recloser.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"ReclosersS",
          "name":"SwitchedObj"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get a vector of strings with names of all Reclosers in active circuit.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"ReclosersV",
          "name":"AllNames"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get a vector of doubles: reclose intervals (s) between shots.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"ReclosersV",
          "name":"RecloseIntervals"
        }
      ],
      "name":"Reclosers"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the first RegControl active. Returns 0 if no more.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the next RegControl active. Returns 0 if no more",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the tapped winding number.\nSet the tapped winding number.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsI",
          "name":"TapWinding"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the winding number for PT and CT connections.\nSet the winding number for PT and CT connections.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsI",
          "name":"Winding"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the setting in the reverse direction, usually not applicable to substation Transformers.\nSet the different settings for the reverse direction (see Manual for details), usually not applicable to substation Transformers.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsI",
          "name":"IsReversible"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the inverse time feature. Time delay is inversely adjusted, proportional to the amount of voltage outside the regulator band.\nSet the inverse time feature. Time delay is inversely adjusted, proportional to the amount of voltage outside the regulator band.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsI",
          "name":"IsInverseTime"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the maximum tap change per iteration in STATIC solution mode. 1 is more realistic, 16 is the default for faster solution.\nSet the maximum tap change per iteration in STATIC solution mode. 1 is more realistic, 16 is the default for faster solution.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsI",
          "name":"MaxTapChange"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the number of RegControl objects in Active Circuit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                13,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                14,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the tap number.\nSet the tap number.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsI",
          "name":"TapNumber"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the CT primary ampere rating (secondary is 0.2 amperes).\nSet the CT primary ampere rating (secondary is 0.2 amperes).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsF",
          "name":"CTPrimary"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the PT ratio for voltage control settings.\nSet the PT ratio for voltage control settings.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsF",
          "name":"PTRatio"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the LDC R settings in Volts.\nSet the LDC R settings in Volts.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsF",
          "name":"ForwardR"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the LDC X settings in Volts.\nSet the LDC X settings in Volts.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsF",
          "name":"ForwardX"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the reverse LDC R settings in Volts.\nSet the reverse LDC R settings in Volts.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsF",
          "name":"ReverseR"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the reverse LDC X settings in Volts.\nSet the reverse LDC X settings in Volts.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsF",
          "name":"ReverseX"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                13,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the time delay [s] after arming before the first tap change. Control may reset before actually changing taps.\nSet the time delay [s] after arming before the first tap change. Control may reset before actually changing taps.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsF",
          "name":"Delay"
        },
        {
          "args":[
            {
              "dss_args":[
                14,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                15,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the time delay [s] for subsequent tap changes in a set. Control may reset before actually changing taps.\nSet the time delay [s] for subsequent tap changes in a set. Control may reset before actually changing taps.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsF",
          "name":"TapDelay"
        },
        {
          "args":[
            {
              "dss_args":[
                16,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                17,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the first house voltage limit on PT secondary base. Setting to 0 disables this function.\nSet the first house voltage limit on PT secondary base. Setting to 0 disables this function.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsF",
          "name":"VoltageLimit"
        },
        {
          "args":[
            {
              "dss_args":[
                18,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                19,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the regulation bandwidth in forward direction, centered on Vreg.\nSet the regulation bandwidth in forward direction, centered on Vreg.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsF",
          "name":"ForwardBand"
        },
        {
          "args":[
            {
              "dss_args":[
                20,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                21,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the target voltage in the forward direction, on PT secondary base.\nSet the target voltage in the forward direction, on PT secondary base.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsF",
          "name":"ForwardVreg"
        },
        {
          "args":[
            {
              "dss_args":[
                22,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                23,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the bandwidth in reverse direction, centered on reverse Vreg.\nSet the bandwidth in reverse direction, centered on reverse Vreg.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsF",
          "name":"ReverseBand"
        },
        {
          "args":[
            {
              "dss_args":[
                24,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                25,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the target voltage in the reverse direction, on PT secondary base.\nSet the target voltage in the reverse direction, on PT secondary base.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsF",
          "name":"ReverseVreg"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the active RegControl name.\nSet the active RegControl name.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the remote regulated bus, in lieu of LDC settings.\nSet the name of the remote regulated bus, in lieu of LDC settings.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsS",
          "name":"MonitoredBus"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the transformer this regulator controls.\nSet the name of the transformer this regulator controls.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RegControlsS",
          "name":"Transformer"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get a vector of strings containing all RegControl names.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"RegControlsV",
          "name":"AllNames"
        }
      ],
      "name":"RegControls"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get number of Relays in active circuit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RelaysI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set first relay active. If none, returns 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RelaysI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set next relay active. If none, returns 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RelaysI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the number of terminal of monitored element that this relay is monitoring.\nSet the number of terminal of monitored element that this relay is monitoring.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RelaysI",
          "name":"MonitoredTerm"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the number of terminal of the switched object that will be opened when the relay trips.\nSet the number of terminal of the switched object that will be opened when the relay trips.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RelaysI",
          "name":"SwitchedTerm"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the active relay by index into the Relay list. 1..Count.\nSet the active relay by index into the Relay list. 1..Count.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RelaysI",
          "name":"Idx"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the active Relay.\nSet the name of the active Relay.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RelaysS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the full name of the object this relay is monitoring.\nSet the full name of the object this relay is monitoring.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RelaysS",
          "name":"MonitoredObj"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the full name of element that will switched when relay trips.\nSet the full name of element that will switched when relay trips.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"RelaysS",
          "name":"SwitchedObj"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get a vector of strings containing names of all relay elements.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"RelaysV",
          "name":"AllNames"
        }
      ],
      "name":"Relays"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get number of Sensors in active circuit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SensorsI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the first sensor active. Returns 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SensorsI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the next sensor active. Returns 0 if none",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SensorsI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Returns 1 if the sensor is connected in delta; otherwise, returns 0.\nAllows to set 1 if the sensor is connected in delta; otherwise, set 0 (argument).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SensorsI",
          "name":"IsDelta"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Returns 1 if voltage measurements are 1-3, 3-2, 2-1; otherwise 0.\nAllows to set 1 if voltage measurements are 1-3, 3-2, 2-1; otherwise 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SensorsI",
          "name":"ReverseDelta"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the number of the measured terminal in the measured element.\nSet the number of the measured terminal in the measured element.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SensorsI",
          "name":"MeteredTerminal"
        },
        {
          "args":[
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Clears the active sensor.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SensorsI",
          "name":"Reset"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Clears all Sensors in the active circuit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SensorsI",
          "name":"ResetAll"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the assumed percent error in the Sensor measurement. Default is 1.\nSet the assumed percent error in the Sensor measurement. Default is 1.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SensorsF",
          "name":"PctError"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the weighting factor for this sensor measurement with respect to the other Sensors. Default is 1.\nSet the weighting factor for this sensor measurement with respect to the other Sensors. Default is 1.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SensorsF",
          "name":"Weight"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the voltage base for the sensor measurements. LL for 2 and 3 - phase Sensors, LN for 1-phase Sensors.\nSet the voltage base for the sensor measurements. LL for 2 and 3 - phase Sensors, LN for 1-phase Sensors.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SensorsF",
          "name":"kVBase"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the active sensor object.\nSet the name of the active sensor object.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SensorsS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the full name of the measured element.\nSet the full name of the measured element.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SensorsS",
          "name":"MeteredElement"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Returns a vector of sensor names.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"SensorsV",
          "name":"AllNames"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get an array of doubles for the line current measurements; don't use with KWS and KVARS.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"SensorsV",
          "name":"Currents"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get an array of doubles for Q measurements; overwrites currents with a new estimate using KWS.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"SensorsV",
          "name":"kvar"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get an array of doubles for P measurements; overwrites currents with a new estimate using KVARS.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"SensorsV",
          "name":"kW"
        }
      ],
      "name":"Sensors"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get if OpenDSS allows duplicate names of objects: {1 allow, 0 not allow}.\nSet if OpenDSS allows duplicate names of objects: {1 allow, 0 not allow}.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SettingsI",
          "name":"AllowDuplicates"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the status of Lock zones on energy Meters to prevent rebuilding if a circuit change occurs: {1= true, 0= False}.\nSet the status of Lock zones on energy Meters to prevent rebuilding if a circuit change occurs: {1= true, 0= False}.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SettingsI",
          "name":"ZoneLock"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get {dssMultiphase* | dssPositiveSeq} Indicate if the circuit model is positive sequence.\nSet {dssMultiphase* | dssPositiveSeq} Indicate if the circuit model is positive sequence.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SettingsI",
          "name":"CktModel"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get {True (1) | False (0)} value of trapezoidal integration flag in Energy Meters.\nSet {True (1) | False (0)} value of trapezoidal integration flag in Energy Meters.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SettingsI",
          "name":"Trapezoidal"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set all load allocation factors for all loads defined by XFKVA property to this value.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SettingsF",
          "name":"AllocationFactors"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the per unit minimum voltage for Normal conditions.\nSet the per unit minimum voltage for Normal conditions.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SettingsF",
          "name":"NormVminpu"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the per unit maximum voltage for Normal conditions.\nSet the per unit maximum voltage for Normal conditions.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SettingsF",
          "name":"NormVmaxpu"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the per unit minimum voltage for Emergency conditions.\nSet the per unit minimum voltage for Emergency conditions.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SettingsF",
          "name":"EmergVminpu"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the per unit maximum voltage for Emergency conditions.\nSet the per unit maximum voltage for Emergency conditions.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SettingsF",
          "name":"EmergVmaxpu"
        },
        {
          "args":[
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the weighting factor applied to UE register values.\nSet the weighting factor applied to UE register values.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SettingsF",
          "name":"UEWeight"
        },
        {
          "args":[
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                12,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the weighting factor applied to Loss register values.\nSet the weighting factor applied to Loss register values.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SettingsF",
          "name":"LossWeight"
        },
        {
          "args":[
            {
              "dss_args":[
                13,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                14,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the price signal for the circuit.\nSet the price signal for the circuit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SettingsF",
          "name":"PriceSignal"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the list of Buses or (File=xxxxx) syntax for the AutoAdd solution mode.\nSet the list of Buses or (File=xxxxx) syntax for the AutoAdd solution mode.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SettingsS",
          "name":"AutoBusList"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of LoadShape object that serves as the source of price signal data for yearly simulations, etc.\nSet the name of LoadShape object that serves as the source of price signal data for yearly simulations, etc.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SettingsS",
          "name":"PriceCurve"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get the array of Integers defining Energy Meter registers to use for computing UE.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"SettingsV",
          "name":"UERegs"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get the array of Integers defining Energy Meter registers to use for computing Losses.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"SettingsV",
          "name":"LossRegs"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get the array of doubles defining the legal voltage bases in kV L-L.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"SettingsV",
          "name":"VoltageBases"
        }
      ],
      "name":"Settings"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Executes the solution for the present solution mode. Returns 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"Solve"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The present solution mode (See DSS help).\nModifies the present solution mode (See DSS help).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"Mode"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The present hour (See DSS help).\nModifies the present hour (See DSS help).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"Hour"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The present Year (See DSS help).\nModifies the present Year (See DSS help).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"Year"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Return the number of iterations taken for the last solution.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"Iterations"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The Maximum number of iterations used to solve the circuit.\nModifies the Maximum number of iterations used to solve the circuit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"MaxIterations"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The number of solutions to perform for MonteCarlo and time series simulations.\nModifies the number of solutions to perform for MonteCarlo and time series simulations.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"Number"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                13,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The randomization mode for random variables 'Gaussian' or 'Uniform'.\nModifies the randomization mode for random variables 'Gaussian' or 'Uniform'.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"Random"
        },
        {
          "args":[
            {
              "dss_args":[
                14,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                15,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The Load Model: {dssPowerFlow (default)|dssAdmittance}.\nModifies the Load Model: {dssPowerFlow (default)|dssAdmittance}.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"LoadModel"
        },
        {
          "args":[
            {
              "dss_args":[
                16,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                17,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The type of device to add in AutoAdd Mode: {dssGen (default)|dssCap}.\nModifies the type of device to add in AutoAdd Mode: {dssGen (default)|dssCap}.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"AddType"
        },
        {
          "args":[
            {
              "dss_args":[
                18,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                19,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The base solution algorithm: {dssNormalSolve | dssNewtonSolve}.\nModifies the base solution algorithm: {dssNormalSolve | dssNewtonSolve}.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"Algorithm"
        },
        {
          "args":[
            {
              "dss_args":[
                20,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                21,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The mode for control devices: {dssStatic (default) | dssEvent | dssTime}.\nModifies the mode for control devices: {dssStatic (default) | dssEvent | dssTime}.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"ControlMode"
        },
        {
          "args":[
            {
              "dss_args":[
                22,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                23,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The current value of the control iteration counter.\nModifies the current value of the control iteration counter.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"ControlIterations"
        },
        {
          "args":[
            {
              "dss_args":[
                24,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                25,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The maximum allowable control iterations.\nModifies the maximum allowable control iterations.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"MaxControlIterations"
        },
        {
          "args":[
            {
              "dss_args":[
                26,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Sample controls and then process the control queue for present control mode and dispatch control actions. Returns 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"SampleDoControlActions"
        },
        {
          "args":[
            {
              "dss_args":[
                27,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Executes status check on all fault objects defined in the circuit. Returns 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"CheckFaultStatus"
        },
        {
          "args":[
            {
              "dss_args":[
                28,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Executes a direct solution from the system Y matrix, ignoring compensation currents of loads, generators (includes Yprim only).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"SolveDirect"
        },
        {
          "args":[
            {
              "dss_args":[
                29,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Solves using present power flow method. Iterative solution rather than direct solution.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"SolvePFlow"
        },
        {
          "args":[
            {
              "dss_args":[
                30,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Is similar to SolveSnap except no control actions are checked or executed.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"SolveNoControl"
        },
        {
          "args":[
            {
              "dss_args":[
                31,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Executes a power flow solution (SolveNoControl) plus executes a CheckControlActions that executes any pending control actions.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"SolvePlusControl"
        },
        {
          "args":[
            {
              "dss_args":[
                32,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Initializes some variables for snap shot power flow. SolveSnap does this automatically.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"InitSnap"
        },
        {
          "args":[
            {
              "dss_args":[
                33,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Performs the normal process for sampling and executing Control Actions and Fault Status and rebuilds Y if necessary.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"CheckControls"
        },
        {
          "args":[
            {
              "dss_args":[
                34,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Executes a sampling of all intrinsic control devices, which push control actions into the control queue.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"SampleControlDevices"
        },
        {
          "args":[
            {
              "dss_args":[
                35,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Pops control actions off the control queue and dispatches to the proper control element.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"DoControlActions"
        },
        {
          "args":[
            {
              "dss_args":[
                36,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Forces building of the System Y matrix according to the argument: {1= series elements only | 2= Whole Y matrix}.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"BuildYMatrix"
        },
        {
          "args":[
            {
              "dss_args":[
                37,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Indicates if elements of the System Y have been changed by recent activity. If changed returns 1; otherwise 0.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"SystemYChanged"
        },
        {
          "args":[
            {
              "dss_args":[
                38,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                39,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Indicates whether the circuit solution converged (1 converged | 0 not converged).\nModifies the converged flag (1 converged | 0 not converged).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"Converged"
        },
        {
          "args":[
            {
              "dss_args":[
                40,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The total iterations including control iterations for most recent solution.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"TotalIterations"
        },
        {
          "args":[
            {
              "dss_args":[
                41,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The max number of iterations required to converge at any control iteration of the most recent solution.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"MostIterationsDone"
        },
        {
          "args":[
            {
              "dss_args":[
                42,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                43,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Indicates that the control actions are done: {1 done, 0 not done}.\nModifies the flag to indicate that the control actions are done: {1 done, 0 not done}.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"ControlActionsDone"
        },
        {
          "args":[
            {
              "dss_args":[
                44,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Call cleanup, sample Monitors, and increment time at end of time step.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"FinishTimeStep"
        },
        {
          "args":[
            {
              "dss_args":[
                45,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Update storage, invcontrol, etc., at end of time step.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionI",
          "name":"Cleanup"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The frequency for the next solution.\nSet the frequency for the next solution.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionF",
          "name":"Frequency"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The seconds from top of the hour.\nSet the seconds from top of the hour.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionF",
          "name":"Seconds"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The step size for the next solution.\nSet the step size for the next solution.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionF",
          "name":"StepSize"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The default load multiplier applied to all non-fixed loads.\nSet the default load multiplier applied to all non-fixed loads.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionF",
          "name":"LoadMult"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The solution convergence tolerance.\nSet the solution convergence tolerance.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionF",
          "name":"Convergence"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The percent default annual load growth rate.\nSet the percent default annual load growth rate.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionF",
          "name":"PctGrowth"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                13,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The generator kW for AutoAdd mode.\nSet the generator kW for AutoAdd mode.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionF",
          "name":"GenkW"
        },
        {
          "args":[
            {
              "dss_args":[
                14,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                15,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The pf for generators in AutoAdd mode.\nSet the pf for generators in AutoAdd mode.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionF",
          "name":"GenPF"
        },
        {
          "args":[
            {
              "dss_args":[
                16,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                17,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The capacitor kvar for adding in AutoAdd mode.\nSet the capacitor kvar for adding in AutoAdd mode.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionF",
          "name":"Capkvar"
        },
        {
          "args":[
            {
              "dss_args":[
                18,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                19,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The default multiplier applied to generators (like LoadMult).\nSet the default multiplier applied to generators (like LoadMult).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionF",
          "name":"GenMult"
        },
        {
          "args":[
            {
              "dss_args":[
                20,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                21,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"The hour as a double, including fractional part.\nSet the hour as a double, including fractional part.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionF",
          "name":"DblHour"
        },
        {
          "args":[
            {
              "dss_args":[
                22,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Set the step size in minutes.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionF",
          "name":"StepSizeMin"
        },
        {
          "args":[
            {
              "dss_args":[
                23,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Set the step size in Hours.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionF",
          "name":"StepSizeHr"
        },
        {
          "args":[
            {
              "dss_args":[
                24,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The time required (microseconds) to perform the latest solution time step, this time does not includes the time required for sampling meters/monitors.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionF",
          "name":"ProcessTime"
        },
        {
          "args":[
            {
              "dss_args":[
                25,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                26,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the accumulated time required (microseconds) to perform the simulation.\nSet the accumulated time required (microseconds) to perform the simulation.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionF",
          "name":"TotalTime"
        },
        {
          "args":[
            {
              "dss_args":[
                27,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The time required (microseconds) to perform the latest solution time step including the time required for sampling meters/monitors",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionF",
          "name":"TimeTimeStep"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "0"
              ],
              "user_args":0
            }
          ],
          "doc":"The ID (text) of the present solution mode.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionS",
          "name":"ModeID"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"The Load-Duration Curve name for LD modes.\nSet the Load-Duration Curve name for LD modes.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionS",
          "name":"LDCurve"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                4,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"The default daily load shape (defaults to 'Default').\nSet the default daily load shape (defaults to 'Default').",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionS",
          "name":"DefaultDaily"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                6,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"The default yearly load shape (defaults to 'Default').\nSet the default yearly load shape (defaults to 'Default').",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SolutionS",
          "name":"DefaultYearly"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Returns an array of strings containing the Event Log.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"SolutionV",
          "name":"EventLog"
        }
      ],
      "name":"Solution"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the first SwtControl active. Returns 0 if no more.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SwtControlsI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the next SwtControl active. Returns 0 if no more.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SwtControlsI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the open (1) or close (2) action of the switch. No effect if switch is locked. However, reset removes any lock and then closes the switch (shelf state). 0 = none action.\nSet open (1) or close (2) the switch. No effect if switch is locked. However, reset removes any lock and then closes the switch (shelf state). 0 = none action (see manual for details).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SwtControlsI",
          "name":"Action"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the lock state: {1 locked | 0 not locked}.\nSet the lock to prevent both manual and automatic switch operation.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SwtControlsI",
          "name":"IsLocked"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the terminal number where the switch is located on the SwitchedObj.\nSet the terminal number where the switch is located on the SwitchedObj.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SwtControlsI",
          "name":"SwitchedTerm"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the total number of SwtControls in the active circuit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SwtControlsI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the time delay [s] between arming and opening or closing the switch. Control may reset before actually operating the switch.\nSet the time delay [s] between arming and opening or closing the switch. Control may reset before actually operating the switch.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SwtControlsF",
          "name":"Delay"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the active SwtControl.\nSet a SwtControl active by name.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SwtControlsS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the switched object by the active SwtControl.\nSet the switched object by name.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"SwtControlsS",
          "name":"SwitchedObj"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get a vector of strings with all SwtControl names in the active circuit.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"SwtControlsV",
          "name":"AllNames"
        }
      ],
      "name":"SwtControls"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the number of loops.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TopologyI",
          "name":"NumLoops"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the number of isolated branches (PD elements and capacitors).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TopologyI",
          "name":"NumIsolatedBranches"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the number of isolated loads.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TopologyI",
          "name":"NumIsolatedLoads"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the first branch active, returns 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TopologyI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the next branch active, returns 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TopologyI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The index of the active Branch.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TopologyI",
          "name":"ActiveBranch"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Move forward in the tree, return index of new active branch or 0 if no more.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TopologyI",
          "name":"ForwardBranch"
        },
        {
          "args":[
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Move back toward the source, return index of new active branch or 0 if no more.",
          "enabled":false,
          "function_type":"CtypesFunction",
          "library_function_name":"TopologyI",
          "name":"BackwardBranch"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Move to looped branch, return index or 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TopologyI",
          "name":"LoopedBranch"
        },
        {
          "args":[
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Mode to directly parallel branch, return index or 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TopologyI",
          "name":"ParallelBranch"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set as active load the first load at the active branch, return index or 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TopologyI",
          "name":"FirstLoad"
        },
        {
          "args":[
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set as active load the next load at the active branch, return index or 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TopologyI",
          "name":"NextLoad"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the topological depth of the active branch.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TopologyI",
          "name":"ActiveLevel"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the active branch.\nSet the name of the active branch.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TopologyS",
          "name":"BranchName"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the active Bus.\nSet the Bus active by name.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TopologyS",
          "name":"BusName"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get a vector of all looped element names, by pairs.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"TopologyV",
          "name":"AllLoopedPairs"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get a vector of all isolated branch names.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"TopologyV",
          "name":"AllIsolatedBranches"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get a vector of all isolated load names.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"TopologyV",
          "name":"AllIsolatedLoads"
        }
      ],
      "name":"Topology"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the number of windings on this transformer. Allocates memory; set or change this property first.\nSet the number of windings on this transformer. Allocates memory; set or change this property first.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersI",
          "name":"NumWindings"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the active winding number from 1..NumWindings. Update this before reading or setting a sequence of winding properties (R, Tap, kV, kVA, etc.).\nSet the active winding number from 1..NumWindings. Update this before reading or setting a sequence of winding properties (R, Tap, kV, kVA, etc.).",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersI",
          "name":"Wdg"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the active winding number of tap steps between MinTap and MaxTap.\nSet the active winding number of tap steps between MinTap and MaxTap",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersI",
          "name":"NumTaps"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the information about if the active winding is delta (1) or wye (0) connection.\nSet the information about if the active winding is delta (1) or wye (0) connection.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersI",
          "name":"IsDelta"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the first Transformer active. Return 0 if no more.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the next Transformer active. Return 0 if no more.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get the number of Transformers within the active circuit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the active winding resistance in %.\nSet the active winding resistance in %.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersF",
          "name":"R"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the active winding tap in per-unit.\nSet the active winding tap in per-unit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersF",
          "name":"Tap"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the active winding minimum tap in per-unit.\nSet the active winding minimum tap in per-unit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersF",
          "name":"MinTap"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the active winding maximum tap in per-unit.\nSet the active winding maximum tap in per-unit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersF",
          "name":"MaxTap"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the active winding kV rating. Phase-phase for 2 or 3 phases, actual winding kV 1 phase transformer.\nSet the active winding kV rating. Phase-phase for 2 or 3 phases, actual winding kV 1 phase transformer.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersF",
          "name":"kV"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the active winding kVA rating. On winding 1, this also determines normal and emergency current ratings for all windings.\nSet the active winding kVA rating. On winding 1, this also determines normal and emergency current ratings for all windings.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersF",
          "name":"kVA"
        },
        {
          "args":[
            {
              "dss_args":[
                12,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                13,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the active winding neutral reactance [ohms] for wye connections.\nSet the active winding neutral reactance [ohms] for wye connections.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersF",
          "name":"Xneut"
        },
        {
          "args":[
            {
              "dss_args":[
                14,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                15,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the active winding neutral resistance [ohms] for wye connections. Set less than zero ungrounded wye.\nSet the active winding neutral resistance [ohms] for wye connections. Set less than zero ungrounded wye.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersF",
          "name":"Rneut"
        },
        {
          "args":[
            {
              "dss_args":[
                16,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                17,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the percent reactance between windings 1 and 2, on winding 1 kVA base. Use for 2 winding or 3 winding Transformers.\nSet the percent reactance between windings 1 and 2, on winding 1 kVA base. Use for 2 winding or 3 winding Transformers.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersF",
          "name":"Xhl"
        },
        {
          "args":[
            {
              "dss_args":[
                18,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                19,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the percent reactance between windings 1 and 3, on winding 1 kVA base. Use for 3 winding Transformers only.\nSet the percent reactance between windings 1 and 3, on winding 1 kVA base. Use for 3 winding Transformers only.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersF",
          "name":"Xht"
        },
        {
          "args":[
            {
              "dss_args":[
                20,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                21,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the percent reactance between windings 2 and 3, on winding 1 kVA base. Use for 3 winding Transformers only.\nSet the percent reactance between windings 2 and 3, on winding 1 kVA base. Use for 3 winding Transformers only.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersF",
          "name":"Xlt"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of an XfrmCode that supplies electrical paraMeters for this transformer.\nSet the name of an XfrmCode that supplies electrical paraMeters for this transformer.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersS",
          "name":"XfmrCode"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the active transformer name and 3, on winding_1_kVA base. Use for 3 winding transformer only.\nSet the active transformer name and 3, on winding_1_kVA base. Use for 3 winding transformer only.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"TransformersS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get a vector of strings with all Transformer names in the active circuit.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"TransformersV",
          "name":"AllNames"
        }
      ],
      "name":"Transformers"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"The number of VSource objects currently defined in the active circuit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"VsourcesI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the first VSource to be active; returns 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"VsourcesI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set the next VSource to be active; returns 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"VsourcesI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the number of phases of the active VSource.\nSet the number of phases of the active VSource.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"VsourcesI",
          "name":"Phases"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the source voltage in kV.\nSet the source voltage in kV.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"VsourcesF",
          "name":"BasekV"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the source voltage in pu.\nSet the source voltage in pu.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"VsourcesF",
          "name":"PU"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the source phase angle of first phase in degrees.\nSet the source phase angle of first phase in degrees.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"VsourcesF",
          "name":"AngleDeg"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the source frequency in Hz.\nSet the source frequency in Hz.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"VsourcesF",
          "name":"Frequency"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the active VSource.\nSet the name of the active VSource.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"VsourcesS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get the names of all Vsources",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"VsourcesV",
          "name":"AllNames"
        }
      ],
      "name":"Vsources"
    },
    {
      "functions":[
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Get number of XYCurves in active circuit.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"XYCurvesI",
          "name":"Count"
        },
        {
          "args":[
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set first XYCurves object active; returns 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"XYCurvesI",
          "name":"First"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            }
          ],
          "doc":"Set next XYCurves object active; returns 0 if none.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"XYCurvesI",
          "name":"Next"
        },
        {
          "args":[
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the number of points in X-Y curve.\nSet the number of points in X-Y curve.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"XYCurvesI",
          "name":"Npts"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the interpolated value after setting Y.\nSet the X value.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"XYCurvesF",
          "name":"X"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                3,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the interpolated value after setting X.\nSet the Y value.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"XYCurvesF",
          "name":"Y"
        },
        {
          "args":[
            {
              "dss_args":[
                4,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                5,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the amount to shift X value from original curve.\nSet the amount to shift X value from original curve.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"XYCurvesF",
          "name":"XShift"
        },
        {
          "args":[
            {
              "dss_args":[
                6,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                7,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the amount to shift Y value from original curve.\nSet the amount to shift Y value from original curve.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"XYCurvesF",
          "name":"YShift"
        },
        {
          "args":[
            {
              "dss_args":[
                8,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                9,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the factor to scale X values from original curve.\nSet the factor to scale X values from original curve.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"XYCurvesF",
          "name":"XScale"
        },
        {
          "args":[
            {
              "dss_args":[
                10,
                0
              ],
              "user_args":0
            },
            {
              "dss_args":[
                11,
                0
              ],
              "user_args":1
            }
          ],
          "doc":"Get the factor to scale Y values from original curve.\nSet the factor to scale Y values from original curve.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"XYCurvesF",
          "name":"YScale"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                "1"
              ],
              "user_args":0
            },
            {
              "dss_args":[
                1,
                "1"
              ],
              "user_args":1
            }
          ],
          "doc":"Get the name of the active XYCurve Object.\nSet the name of the active XYCurve Object.",
          "enabled":true,
          "function_type":"CtypesFunction",
          "library_function_name":"XYCurvesS",
          "name":"Name"
        },
        {
          "args":[
            {
              "dss_args":[
                0,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get the X values as a vector of doubles. Set Npts to max number expected if setting.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"XYCurvesV",
          "name":"XArray"
        },
        {
          "args":[
            {
              "dss_args":[
                2,
                null
              ],
              "user_args":0
            }
          ],
          "doc":"Get the Y values as a vector of doubles. Set Npts to max number expected if setting.",
          "enabled":true,
          "function_type":"VarArrayFunction",
          "library_function_name":"XYCurvesV",
          "name":"YArray"
        }
      ],
      "name":"XYCurves"
    }
  ]
}
